{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "104a662b-097a-435b-be6e-8a37b8f7f1ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "# for array computations and loading data\n",
    "import numpy as np\n",
    "\n",
    "# for building linear regression models and preparing data\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.preprocessing import StandardScaler, PolynomialFeatures\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "# for building and training neural networks\n",
    "import tensorflow as tf\n",
    "\n",
    "# custom functions\n",
    "import utils\n",
    "\n",
    "# reduce display precision on numpy arrays\n",
    "np.set_printoptions(precision=2)\n",
    "\n",
    "# suppress warnings\n",
    "tf.get_logger().setLevel('ERROR')\n",
    "tf.autograph.set_verbosity(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7ce55dfa-a9bd-4629-9bf6-4076a3dda52a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            id Product ID  Tool wear [min]  Machine failure  \\\n",
      "0            0     L50096              140                0   \n",
      "2            2     L49454               25                0   \n",
      "3            3     L53355              197                0   \n",
      "6            6     L56736              156                0   \n",
      "7            7     L55488               67                0   \n",
      "...        ...        ...              ...              ...   \n",
      "136421  136421     L56507               18                0   \n",
      "136422  136422     L51411               54                0   \n",
      "136426  136426     L54690              214                0   \n",
      "136427  136427     L53876               42                0   \n",
      "136428  136428     L47937              229                0   \n",
      "\n",
      "        Air temperature [K]  \n",
      "0                     300.6  \n",
      "2                     299.3  \n",
      "3                     301.0  \n",
      "6                     299.6  \n",
      "7                     298.7  \n",
      "...                     ...  \n",
      "136421                298.5  \n",
      "136422                302.2  \n",
      "136426                300.5  \n",
      "136427                301.7  \n",
      "136428                296.9  \n",
      "\n",
      "[95354 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "# Load the CSV file\n",
    "file_path = 'data.csv'  # Update the path with the correct CSV file path\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Filter rows where Product ID starts with 'L'\n",
    "filtered_df = df[df['Product ID'].str.startswith('L')]\n",
    "\n",
    "# Display the filtered dataframe\n",
    "print(filtered_df)\n",
    "\n",
    "# Save the filtered dataframe to a new CSV file\n",
    "filtered_df.to_csv('filtered_products.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f08ef22f-0d38-4237-9ea3-8e89f5d3cc67",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the shape of the inputs x is: (95354, 1)\n",
      "the shape of the targets y is: (95354, 1)\n"
     ]
    }
   ],
   "source": [
    "x = filtered_df['Tool wear [min]'].to_numpy()\n",
    "z=filtered_df['Air temperature [K]'].to_numpy()\n",
    "y = filtered_df['Machine failure'].to_numpy()\n",
    "\n",
    "# Convert 1-D arrays into 2-D because the commands later will require it\n",
    "x = np.expand_dims(x, axis=1)\n",
    "y = np.expand_dims(y, axis=1)\n",
    "z = np.expand_dims(z, axis=1)\n",
    "\n",
    "print(f\"the shape of the inputs x is: {x.shape}\")\n",
    "print(f\"the shape of the targets y is: {y.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "34e3ecf9-6662-4f19-bff5-80117cac5fb2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the entire dataset\n",
    "utils.plot_dataset(x=x, y=y, title=\"input vs. target\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bdcea36b-6d69-48a2-b8a0-5720147bc6dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           id Product ID  Tool wear [min]  Machine failure  \\\n",
      "0           0     L50096              140                0   \n",
      "1           2     L49454               25                0   \n",
      "2           3     L53355              197                1   \n",
      "3           6     L56736              156                1   \n",
      "4           7     L55488               67                0   \n",
      "...       ...        ...              ...              ...   \n",
      "95349  136421     L56507               18                0   \n",
      "95350  136422     L51411               54                0   \n",
      "95351  136426     L54690              214                1   \n",
      "95352  136427     L53876               42                0   \n",
      "95353  136428     L47937              229                1   \n",
      "\n",
      "       Air temperature [K]  \n",
      "0                    300.6  \n",
      "1                    299.3  \n",
      "2                    301.0  \n",
      "3                    299.6  \n",
      "4                    298.7  \n",
      "...                    ...  \n",
      "95349                298.5  \n",
      "95350                302.2  \n",
      "95351                300.5  \n",
      "95352                301.7  \n",
      "95353                296.9  \n",
      "\n",
      "[95354 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "def update_machine_failure(file_path, output_path):\n",
    "    # Load the CSV file\n",
    "    df = pd.read_csv(file_path)\n",
    "    \n",
    "    # Update 'Machine failure' based on 'Tool wear [min]' value\n",
    "    df['Machine failure'] = df['Tool wear [min]'].apply(lambda x: 1 if x > 150 else 0)\n",
    "    \n",
    "    # Save the updated DataFrame to a new CSV file\n",
    "    df.to_csv(output_path, index=False)\n",
    "\n",
    "    return df\n",
    "\n",
    "# Example usage:\n",
    "file_path = 'filtered_products.csv'  # Replace with your file path\n",
    "output_path = 'updated_file.csv'  # Path to save the updated file\n",
    "updated_df = update_machine_failure(file_path, output_path)\n",
    "\n",
    "# Display the updated dataframe (optional)\n",
    "print(updated_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b8c0e98d-6db2-4788-8c2e-cc52dae91c8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the shape of the inputs x is: (95354, 1)\n",
      "the shape of the targets y is: (95354, 1)\n"
     ]
    }
   ],
   "source": [
    "x = updated_df ['Tool wear [min]'].to_numpy()\n",
    "z=updated_df ['Air temperature [K]'].to_numpy()\n",
    "y = updated_df ['Machine failure'].to_numpy()\n",
    "\n",
    "# Convert 1-D arrays into 2-D because the commands later will require it\n",
    "x = np.expand_dims(x, axis=1)\n",
    "y = np.expand_dims(y, axis=1)\n",
    "z = np.expand_dims(z, axis=1)\n",
    "\n",
    "print(f\"the shape of the inputs x is: {x.shape}\")\n",
    "print(f\"the shape of the targets y is: {y.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f19dd2e0-f853-406a-8a8b-93cc022ec5de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the entire dataset\n",
    "utils.plot_dataset(x=x, y=y, title=\"input vs. target\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a9014ddb-216e-4870-8a23-1ad83338ea29",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Product ID  Tool wear [min]  Machine failure  Air temperature [K]\n",
      "0     L00001       168.727006              0.0           293.702659\n",
      "1     L00002       197.535715              0.0           300.838019\n",
      "2     L00003       186.599697              0.0           307.458917\n",
      "3     L00004       179.932924              0.0           304.644498\n",
      "4     L00005       157.800932              0.0           306.131223\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "def generate_data(file_path):\n",
    "    # Generate 1000 entries with 'Tool wear [min]' between 150 and 200 and 'Machine failure' as 0\n",
    "    np.random.seed(42)  # For reproducibility\n",
    "    tool_wear_values = np.random.uniform(150, 200, 1000)\n",
    "    machine_failure_values = np.zeros(1000)\n",
    "    air_temperature_values = np.random.uniform(290, 310, 1000)  # Example air temperature values\n",
    "\n",
    "    # Create a DataFrame\n",
    "    new_data = pd.DataFrame({\n",
    "        'Product ID': [f'L{str(i).zfill(5)}' for i in range(1, 1001)],  # Example Product IDs\n",
    "        'Tool wear [min]': tool_wear_values,\n",
    "        'Machine failure': machine_failure_values,\n",
    "        'Air temperature [K]': air_temperature_values\n",
    "    })\n",
    "\n",
    "    # Save the DataFrame to a CSV file\n",
    "    new_data.to_csv(file_path, index=False)\n",
    "\n",
    "    return new_data\n",
    "\n",
    "# Example usage:\n",
    "file_path = 'generated_data.csv'  # Path to save the generated file\n",
    "generated_df = generate_data(file_path)\n",
    "\n",
    "# Display the first few rows of the generated DataFrame (optional)\n",
    "print(generated_df.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8891c76d-9299-4482-8b5e-24adb48cbc7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    id Product ID  Tool wear [min]  Machine failure  Air temperature [K]\n",
      "0  0.0     L50096            140.0              0.0                300.6\n",
      "1  2.0     L49454             25.0              0.0                299.3\n",
      "2  3.0     L53355            197.0              1.0                301.0\n",
      "3  6.0     L56736            156.0              1.0                299.6\n",
      "4  7.0     L55488             67.0              0.0                298.7\n"
     ]
    }
   ],
   "source": [
    "def append_generated_data(existing_file_path, generated_file_path, output_file_path):\n",
    "    # Load the existing CSV file\n",
    "    existing_df = pd.read_csv(existing_file_path)\n",
    "    \n",
    "    # Generate new data\n",
    "    generated_df = generate_data(generated_file_path)\n",
    "    \n",
    "    # Append the new data to the existing DataFrame\n",
    "    combined_df = pd.concat([existing_df, generated_df], ignore_index=True)\n",
    "    \n",
    "    # Save the combined DataFrame to a new CSV file\n",
    "    combined_df.to_csv(output_file_path, index=False)\n",
    "\n",
    "    return combined_df\n",
    "\n",
    "# Example usage:\n",
    "existing_file_path = 'updated_file.csv'  # Path to your existing file\n",
    "generated_file_path = 'generated_data.csv'  # Path to the generated file\n",
    "output_file_path = 'combined_data.csv'  # Path to save the combined file\n",
    "combined_df = append_generated_data(existing_file_path, generated_file_path, output_file_path)\n",
    "\n",
    "# Display the first few rows of the combined DataFrame (optional)\n",
    "print(combined_df.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3b692b10-2427-448a-a836-b7c725ba8fbf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the shape of the inputs x is: (96354, 1)\n",
      "the shape of the targets y is: (96354, 1)\n"
     ]
    }
   ],
   "source": [
    "x = combined_df ['Tool wear [min]'].to_numpy()\n",
    "z=combined_df ['Air temperature [K]'].to_numpy()\n",
    "y = combined_df ['Machine failure'].to_numpy()\n",
    "\n",
    "# Convert 1-D arrays into 2-D because the commands later will require it\n",
    "x = np.expand_dims(x, axis=1)\n",
    "y = np.expand_dims(y, axis=1)\n",
    "z = np.expand_dims(z, axis=1)\n",
    "\n",
    "print(f\"the shape of the inputs x is: {x.shape}\")\n",
    "print(f\"the shape of the targets y is: {y.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d6c4083f-3955-4a9e-9184-a38a7d767c31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the entire dataset\n",
    "utils.plot_dataset(x=x, y=y, title=\"input vs. target\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "741c88e2-c1fc-4787-ba5c-d87ae271b3ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Update the file path to your CSV file\n",
    "file_path = 'updated_file.csv'\n",
    "\n",
    "# Load the CSV file\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Shuffle the DataFrame rows\n",
    "shuffled_df = df.sample(frac=1, random_state=42).reset_index(drop=True)\n",
    "\n",
    "# Save the shuffled DataFrame to a new CSV file\n",
    "shuffled_file_path = 'shuffled_file.csv'  # Update this path as needed\n",
    "shuffled_df.to_csv(shuffled_file_path, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b11ff2f2-3c62-44bc-b0a4-7d9df8bf02b4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
